plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android' version '1.9.0'
    id 'com.google.devtools.ksp' version '1.9.0-1.0.11'
//    id 'stringfog'
//    id 'com.joom.paranoid'
}

//stringfog {
////    import com.github.megatronking.stringfog.plugin.StringFogMode
////    import com.github.megatronking.stringfog.plugin.kg.RandomKeyGenerator
//    // 必要：加解密库的实现类路径，需和上面配置的加解密算法库一致。
//    implementation 'com.github.megatronking.stringfog.xor.StringFogImpl'
//    // 可选：加密开关，默认开启。
//    enable true
//    // 可选：指定需加密的代码包路径，可配置多个，未指定将默认全部加密。
//    fogPackages = ['com.luckyzyx.luckytool.ui', 'com.luckyzyx.luckytool.utils']
//    // 可选（3.0版本新增）：指定密钥生成器，默认使用长度8的随机密钥（每个字符串均有不同随机密钥）,
//    // 也可以指定一个固定的密钥：HardCodeKeyGenerator("This is a key")
//    kg new RandomKeyGenerator()
//    // 可选（4.0版本新增）：用于控制字符串加密后在字节码中的存在形式, 默认为base64，
//    // 也可以使用text或者bytes
//    mode StringFogMode.base64
//}

android {
    signingConfigs {
        release {
            v1SigningEnabled true
            v2SigningEnabled true
            storeFile file('..\\keystore\\luckyzyx.jks')
            storePassword 'luckyzyx'
            keyAlias 'luckyzyx'
            keyPassword 'luckyzyx'
        }
    }
    compileSdk 33
    namespace 'com.luckyzyx.luckytool'
    def currentVersionCode = getVersionCode()
    defaultConfig {
        applicationId "com.luckyzyx.luckytool"
        minSdk 30
        //noinspection ExpiredTargetSdkVersion
        targetSdk 28
        versionCode currentVersionCode
        versionName "1.0.10_beta"
        buildConfigField("String", "APP_CENTER_SECRET", "\"${getAppCenterSecret()}\"")
    }

    buildTypes {
        release {
            debuggable false
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            debuggable true
            signingConfig signingConfigs.release
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions { jvmTarget = "17" }
    buildFeatures {
        aidl = true
        viewBinding = true
        buildConfig = true
    }
    applicationVariants.configureEach { variant ->
        variant.outputs.configureEach {
            if ('release' == variant.buildType.name) {
                outputFileName = "LuckyTool_v${variant.versionName}(${versionCode}).apk"
            }
            if ('debug' == variant.buildType.name) {
                outputFileName = "LuckyTool_v${variant.versionName}(${versionCode})_debug.apk"
            }
        }
    }
    //noinspection GrDeprecatedAPIUsage
    androidResources.additionalParameters("--allow-reserved-package-id", "--package-id", "0x64")
}

dependencies {
//    implementation fileTree(dir: "libs", include: ["*.jar"])

    //Xposed基础
    compileOnly "de.robv.android.xposed:api:82"
    //YukiHookAPI ksp
    implementation "com.highcapable.yukihookapi:api:1.1.11"
    ksp "com.highcapable.yukihookapi:ksp-xposed:1.1.11"

//    implementation files("libs/yukihookapi-1.1.5-fix-pkgname-equals.jar")
//    ksp files("libs/yukihookapi-ksp-xposed-1.1.5-beta2.jar")

    //Material主题
    implementation "com.google.android.material:material:1.9.0"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.1"
    //约束布局
    implementation "androidx.constraintlayout:constraintlayout:2.1.4"
    //快速创建Settings
    implementation "androidx.preference:preference-ktx:1.2.0"
    //下拉刷新控件
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"
    //Navigation
    //noinspection GradleDependency
    implementation "androidx.navigation:navigation-fragment-ktx:2.4.2"
    //noinspection GradleDependency
    implementation "androidx.navigation:navigation-ui-ktx:2.5.3"
    //一个强大并且灵活的RecyclerViewAdapter
//    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:3.0.11'
    // 权限请求框架
    implementation "com.github.getActivity:XXPermissions:18.2"
    //崩溃日志显示
    implementation "com.github.simplepeng.SpiderMan:spiderman:v1.1.9"
    // MoShi JSON ksp 注释处理
    def moshiVersion = '1.15.0'
    implementation "com.squareup.moshi:moshi:${moshiVersion}"
    ksp "com.squareup.moshi:moshi-kotlin-codegen:${moshiVersion}"
    //Rikka
//    implementation "dev.rikka.rikkax.core:core:1.4.1"
    //kotlin协程
    def kotlinxCoroutinesVersion = '1.7.3'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${kotlinxCoroutinesVersion}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${kotlinxCoroutinesVersion}"
    //Net OkHttp相关
    //noinspection GradleDependency
    implementation "com.squareup.okhttp3:okhttp:4.10.0"
    implementation "com.github.liangjingkanji:Net:3.5.8"
    //Apache DigestUtils md5 sha256
//    implementation 'com.google.firebase:firebase-crashlytics-buildtools:2.9.2'
    //libsu
    def libsuVersion = '5.0.5'
    implementation "com.github.topjohnwu.libsu:core:${libsuVersion}"
    implementation "com.github.topjohnwu.libsu:service:${libsuVersion}"
//    implementation "com.github.topjohnwu.libsu:nio:${libsuVersion}"

    //Microsoft AppCenter
    def appCenterSdkVersion = '5.0.2'
    implementation "com.microsoft.appcenter:appcenter-analytics:${appCenterSdkVersion}"
    implementation "com.microsoft.appcenter:appcenter-crashes:${appCenterSdkVersion}"

    //StringFog
//    compileOnly 'com.github.megatronking.stringfog:xor:5.0.0'
}

Integer getVersionCode() {
    def propsFile = file('version.properties')
    def properties = new Properties()
    properties.load(new FileInputStream(propsFile))
    def vCode = properties['versionCode'].toInteger()
    properties['versionCode'] = (++vCode).toString()
    properties.store(propsFile.newWriter(), null)
    return vCode
}

String getAppCenterSecret() {
    def fileName = '../.secret/APP_CENTER_SECRET'
    def content = ''
    if (file(fileName).exists()) file(fileName).eachLine { content = it }
    return content
}